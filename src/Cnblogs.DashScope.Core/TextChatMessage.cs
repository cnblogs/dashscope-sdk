using System.Text.Json.Serialization;
using Cnblogs.DashScope.Core.Internals;

namespace Cnblogs.DashScope.Core;

/// <summary>
/// Represents a chat message between the user and the model.
/// </summary>
/// <param name="Role">The role of this message.</param>
/// <param name="Content">The content of this message.</param>
/// <param name="Name">Used when role is tool, represents the function name of this message generated by.</param>
/// <param name="Partial">Notify model that next message should use this message as prefix.</param>
/// <param name="ReasoningContent">Reasoning content for reasoning model.</param>
/// <param name="ToolCalls">Calls to the function.</param>
[method: JsonConstructor]
public record TextChatMessage(
    string Role,
    string Content,
    string? Name = null,
    bool? Partial = null,
    string? ReasoningContent = null,
    List<ToolCall>? ToolCalls = null) : IMessage<string>
{
    /// <summary>
    /// Create chat message from an uploaded DashScope file.
    /// </summary>
    /// <param name="fileId">The id of the file.</param>
    public TextChatMessage(DashScopeFileId fileId)
        : this("system", fileId.ToUrl())
    {
    }

    /// <summary>
    /// Create chat message from multiple DashScope file.
    /// </summary>
    /// <param name="fileIds">Ids of the files.</param>
    public TextChatMessage(IEnumerable<DashScopeFileId> fileIds)
        : this("system", string.Join(',', fileIds.Select(f => f.ToUrl())))
    {
    }

    /// <summary>
    /// Creates a file message.
    /// </summary>
    /// <param name="fileId">The id of the file.</param>
    /// <returns></returns>
    public static TextChatMessage File(DashScopeFileId fileId)
    {
        return new TextChatMessage(fileId);
    }

    /// <summary>
    /// Creates a file message.
    /// </summary>
    /// <param name="fileIds">The file id list.</param>
    /// <returns></returns>
    public static TextChatMessage File(IEnumerable<DashScopeFileId> fileIds)
    {
        return new TextChatMessage(fileIds);
    }

    /// <summary>
    /// Create a user message.
    /// </summary>
    /// <param name="content">Content of the message.</param>
    /// <param name="name">Author name.</param>
    /// <returns></returns>
    public static TextChatMessage User(string content, string? name = null)
    {
        return new TextChatMessage(DashScopeRoleNames.User, content, name);
    }

    /// <summary>
    /// Create a system message.
    /// </summary>
    /// <param name="content">The content of the message.</param>
    /// <returns></returns>
    public static TextChatMessage System(string content)
    {
        return new TextChatMessage(DashScopeRoleNames.System, content);
    }

    /// <summary>
    /// Create an assistant message
    /// </summary>
    /// <param name="content">The content of the message.</param>
    /// <param name="partial">When set to true, content of this message would be the prefix of next model output.</param>
    /// <param name="name">Author name.</param>
    /// <param name="reasoningContent">Think content when reasoning.</param>
    /// <param name="toolCalls">Tool calls by model.</param>
    /// <returns></returns>
    public static TextChatMessage Assistant(
        string content,
        bool? partial = null,
        string? name = null,
        string? reasoningContent = null,
        List<ToolCall>? toolCalls = null)
    {
        return new TextChatMessage(DashScopeRoleNames.Assistant, content, name, partial, reasoningContent, toolCalls);
    }

    /// <summary>
    /// Create a tool message.
    /// </summary>
    /// <param name="content">The output from tool.</param>
    /// <param name="name">The name of the tool.</param>
    /// <returns></returns>
    public static TextChatMessage Tool(string content, string? name = null)
    {
        return new TextChatMessage(DashScopeRoleNames.Tool, content, name);
    }
}
